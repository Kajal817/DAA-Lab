Ques 2 : Given a long list of tasks. Each task takes specific time to accomplish it and each task has a deadline associated with it. You have to design an algorithm and implement it using a program to find maximum number of tasks that can be completed without crossing their deadlines and also find list of selected tasks. Input Format: First line will give total number of tasks n. Second line of input will give n space-separated elements of array representing time taken by each task. Third line of input will give n space-separated elements of array representing deadline associated with each task. 
Output Format : Output will be the total number of maximum tasks that can be completed.
 Sample I/O Problem II:      
INPUT :
7
2 1 3 2 2 2 1
2 3 8 6 2 5 3	
OUTPUT :
Max number of tasks = 4
Selected task number : 1 ,2 , 3, 6

*/
#include<bits/stdc++.h>
using namespace std;
bool compare(pair<int,int>a,pair<int,int>b){
    return a.first > b.first;
}
int main(){
    int n;
    cin>>n;
    int p[n];
    int d[n];
    for(int i=0;i<n;i++)
      cin>>p[i];
    for(int i=0;i<n;i++)
      cin>>d[i];
    vector<pair<int,int> > jobs;
    int profit,deadline;
    for(int i=0;i<n;i++){
        
        jobs.push_back(make_pair(p[i],d[i]));
    }

    sort(jobs.begin(),jobs.end(),compare);

    int maxEndTime = 0;
    for(int i=0;i<n;i++){
        if(jobs[i].second > maxEndTime)
          maxEndTime = jobs[i].second;
    }
    vector<int> ans;
    int fill[maxEndTime];
    int count = 0, maxProfit = 0;
    for(int i=0;i<n;i++)      fill[i] = -1;

    for(int i=0;i<n;i++){
        int j = jobs[i].second - 1;
        while(j>=0 && fill[i]!=-1)    j--;

    if(j>=0 && fill[j]==-1){
        fill[j] = i;
        ans.push_back(i);
        count++;
        maxProfit = maxProfit + jobs[i].first;
      }
    }

    cout<<"Maximum no of tasks : "<<count<<endl;
    cout<<"Selected task numbers : ";
     for(int i=0;i<ans.size();i++)
       cout<<ans[i]<<" ";
    return 0;
}
